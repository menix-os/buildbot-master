# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *

import user_config

c = BuildmasterConfig = {}

c["title"] = user_config.title
c["titleURL"] = user_config.title_url
c["buildbotURL"] = user_config.bot_url
c["services"] = []
c["www"] = dict(
    port=user_config.www_port,
    plugins=dict(
        waterfall_view={},
        console_view={},
        grid_view={},
    ),
)
c["db"] = {
    "db_url": "sqlite:///state.sqlite",
}
c["protocols"] = {"pb": {"port": 9989}}
c["workers"] = []
c["schedulers"] = []
c["builders"] = []

c["change_source"] = []
c["change_source"].append(
    changes.GitPoller(
        "https://github.com/menix-os/bootstrap.git",
        name="Clone bootstrap sources",
        workdir="gitpoller-workdir",
        branch="main",
        pollInterval=300,  # Check for updates every 5 minutes
    )
)


@util.renderer
def jinx_build(props, machine):
    arch = machine["arch"]
    ret = []
    pkgs = str(props.getProperty("pkgs_unbuilt")).split(" ")
    for p in pkgs:
        if "host:" in p:
            ret.append(
                util.ShellArg(
                    command=["../jinx", "host-build", p.split("host:")[1]],
                    logname=f"host-pkg:{p}",
                    haltOnFailure=True,
                )
            )
        else:
            ret.append(
                util.ShellArg(
                    command=["../jinx", "build", p],
                    logname=f"pkg:{p}",
                    haltOnFailure=True,
                )
            )
    return ret


def get_last_line(rc, stdout, stderr):
    return {"pkgs_unbuilt": stdout.strip().splitlines()[-1]}


def build_machine(c, machine):
    arch = machine["arch"]
    worker_name = f"worker-{arch}"
    scheduler_name = f"scheduler-{arch}"
    builder_name = f"build-{arch}"

    # TODO: Get this from the config, also more secure auth method
    w = worker.Worker("worker-x86_64", "pass")
    c["workers"].append(w)

    c["schedulers"].append(
        schedulers.SingleBranchScheduler(
            name=scheduler_name,
            change_filter=util.ChangeFilter(branch="master"),
            treeStableTimer=None,
            builderNames=[builder_name],
        )
    )
    c["schedulers"].append(
        schedulers.ForceScheduler(name="force", builderNames=[builder_name])
    )

    f = util.BuildFactory()

    f.addStep(
        steps.Git(
            repourl="https://github.com/menix-os/bootstrap.git",
            mode="incremental",
            logEnviron=False,
        )
    )
    f.addStep(
        steps.ShellCommand(
            name="prepare_jinx",
            description="Prepare Jinx",
            command=["make", f"build-{arch}/.jinx-parameters"],
            env={"ARCH": arch},
            logEnviron=False,
        )
    )
    f.addStep(
        steps.SetPropertyFromCommand(
            name="find_unbuilt",
            description="Find unbuilt packages",
            command=["../jinx", "dry-run", "*"],
            extract_fn=get_last_line,
            workdir=f"build/build-{arch}",
            logEnviron=False,
            haltOnFailure=True,
        )
    )
    f.addStep(
        steps.ShellSequence(
            name="build_pkgs",
            description="Build packages",
            commands=jinx_build.withArgs(machine),
            workdir=f"build/build-{arch}",
            logEnviron=False,
            haltOnFailure=True,
        )
    )

    # TODO: Upload packages.

    c["builders"].append(
        util.BuilderConfig(name=builder_name, workernames=[worker_name], factory=f)
    )


for machine in user_config.machines:
    build_machine(c, machine)
