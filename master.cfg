# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *

import user_config

c = BuildmasterConfig = {}

c["title"] = user_config.title
c["titleURL"] = user_config.title_url
c["buildbotURL"] = user_config.bot_url
c["services"] = []
c["www"] = dict(
    port=user_config.www_port,
    plugins=dict(
        waterfall_view={},
        console_view={},
        grid_view={},
    ),
)
c["db"] = {
    "db_url": "sqlite:///state.sqlite",
}
c["protocols"] = {"pb": {"port": 9989}}
c["workers"] = []
c["schedulers"] = []
c["builders"] = []
c["change_source"] = []

c["change_source"].append(
    changes.GitPoller(
        "https://github.com/menix-os/bootstrap.git",
        name="poll_bootstrap",
        workdir="gitpoller-workdir",
        branch="main",
        pollInterval=300,  # Check for updates every 5 minutes
    )
)


@util.renderer
def jinx_build(props, machine):
    arch = machine["arch"]
    ret = []
    pkgs = str(props.getProperty("pkgs_unbuilt")).split(" ")
    for p in pkgs:
        if "host:" in p:
            ret.append(
                util.ShellArg(
                    command=["../jinx", "host-build", p.split("host:")[1]],
                    logname=p,
                    haltOnFailure=True,
                )
            )
        else:
            ret.append(
                util.ShellArg(
                    command=["../jinx", "build", p],
                    logname=p,
                    haltOnFailure=True,
                )
            )
    return ret


def get_pkgs_unbuilt(rc, stdout, stderr):
    return {"pkgs_unbuilt": stdout.strip().splitlines()[-1]}


def find_compatible_worker_names(target):
    ret = []
    for w in user_config.workers:
        if target["arch"] in w["archs"]:
            ret.append(w)
    return ret


def create_target(c, target):
    arch = target["arch"]
    scheduler_name = f"scheduler-{arch}"
    builder_name = f"build-{arch}"

    # If there's at least one compatible worker, add the builder for it.
    worker_names = find_compatible_worker_names(target)
    if len(worker_names) == 0:
        return

    c["schedulers"].append(
        schedulers.SingleBranchScheduler(
            name=scheduler_name,
            change_filter=util.ChangeFilter(branch="main"),
            treeStableTimer=None,
            builderNames=[builder_name],
        )
    )

    # Scheduler for force rebuilds
    c["schedulers"].append(
        schedulers.ForceScheduler(
            name=f"force-{scheduler_name}",
            builderNames=[builder_name],
            buttonName=f"Force rebuild {builder_name}",
        )
    )

    f = util.BuildFactory()

    f.addStep(
        steps.Git(
            repourl="https://github.com/menix-os/bootstrap.git",
            mode="incremental",
            logEnviron=False,
        )
    )
    f.addStep(
        steps.ShellCommand(
            name="prepare_jinx",
            description="Prepare Jinx",
            command=["make", f"build-{arch}/.jinx-parameters"],
            env={"ARCH": arch},
            logEnviron=False,
        )
    )
    f.addStep(
        steps.SetPropertyFromCommand(
            name="find_unbuilt",
            description="Find unbuilt packages",
            command=["../jinx", "dry-run", "*"],
            extract_fn=get_pkgs_unbuilt,
            workdir=f"build/build-{arch}",
            logEnviron=False,
            haltOnFailure=True,
        )
    )
    f.addStep(
        steps.ShellSequence(
            name="build_pkgs",
            description="Build packages",
            commands=jinx_build.withArgs(target),
            workdir=f"build/build-{arch}",
            logEnviron=False,
            haltOnFailure=True,
        )
    )

    # TODO: Upload packages.

    c["builders"].append(
        util.BuilderConfig(
            name=builder_name,
            workernames=list(map(lambda x: x["name"], worker_names)),
            factory=f,
        )
    )


def create_image(c, target):
    pass  # TODO: Create an image


for w in user_config.workers:
    # TODO: More secure auth method
    c["workers"].append(worker.Worker(w["name"], w["pass"]))

for t in user_config.targets:
    create_target(c, t)
